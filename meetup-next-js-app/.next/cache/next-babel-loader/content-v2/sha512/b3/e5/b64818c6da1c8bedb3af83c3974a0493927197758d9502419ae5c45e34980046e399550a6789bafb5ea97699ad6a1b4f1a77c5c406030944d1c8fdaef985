{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/christopher/Documents/web/courses/04-react-the-complete-guide/learning-react-v2/meetup-next-js-app/pages/[meetupId]/index.js\";\n// import { Fragment } from 'react';\n// import { useRouter } from 'next/router';\nimport Meetup from '../../components/meetups/Meetup';\n\nfunction MeetupDetail(_ref) {\n  var meetup = _ref.meetup;\n  // const router = useRouter();\n  // const { meetupId } = router.query;\n  // const meetup = MOCK_MEETUPS.find(meetup => meetup.id === meetupId);\n  return /*#__PURE__*/_jsxDEV(Meetup, {\n    meetup: meetup\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 10\n  }, this);\n}\n/*\n  When a page has dynamic routes and uses `getStaticProps()`,\n  it needs to define a list of paths to be statically generated.\n  It returns an object with a `path` property whihc is an array\n  of `params` of each value that we can have for the dynamic\n  route. The returned object also has a `fallback` property which\n  is a boolean. If the `fallback` property is set to false then\n  this indicates Next.js that the list of path params is complete\n  and if a param that does not exist is provided the show a 404\n  page. If it is set to true, then this indicates Next.js to try\n  generate dynamically on the server if a params that does not\n  exist is passed as routing parameter\n*/\n\n\n_c = MeetupDetail;\nexport var __N_SSG = true;\nexport default MeetupDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetail\");","map":{"version":3,"sources":["/Users/christopher/Documents/web/courses/04-react-the-complete-guide/learning-react-v2/meetup-next-js-app/pages/[meetupId]/index.js"],"names":["Meetup","MeetupDetail","meetup"],"mappings":";;AAAA;AACA;AAGA,OAAOA,MAAP,MAAmB,iCAAnB;;AA4BA,SAASC,YAAT,OAAkC;AAAA,MAAVC,MAAU,QAAVA,MAAU;AAChC;AACA;AAEA;AAEA,sBAAO,QAAC,MAAD;AAAQ,IAAA,MAAM,EAAGA;AAAjB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KArBSD,Y;;AAiFT,eAAeA,YAAf","sourcesContent":["// import { Fragment } from 'react';\n// import { useRouter } from 'next/router';\nimport { MongoClient } from 'mongodb';\n\nimport Meetup from '../../components/meetups/Meetup';\n\nconst URL = 'mongodb://127.0.0.1:27017/react-meetups';\n\nconst MOCK_MEETUPS = [\n  {\n    id: 'm1',\n    title: 'The First Meetup',\n    image: 'https://image.shutterstock.com/image-photo/view-malaga-bullring-harbor-spain-600w-281599199.jpg',\n    address: '5th Avenue, Malaga',\n    description: 'This is the first meetup description'\n  },\n  {\n    id: 'm2',\n    title: 'The Second Meetup',\n    image: 'https://image.shutterstock.com/image-photo/dusk-view-barcelona-spain-plaza-600w-520067140.jpg',\n    address: '10th Street, Barcelona',\n    description: 'This is the second meetup description'\n  },\n  {\n    id: 'm3',\n    title: 'The Third Meetup',\n    image: 'https://image.shutterstock.com/image-photo/old-town-prince-palace-on-600w-427693039.jpg',\n    address: '20th Avenue, Monaco',\n    description: 'This is the third meetup description'\n  }\n];\n\nfunction MeetupDetail({ meetup }) {\n  // const router = useRouter();\n  // const { meetupId } = router.query;\n\n  // const meetup = MOCK_MEETUPS.find(meetup => meetup.id === meetupId);\n\n  return <Meetup meetup={ meetup } />;\n}\n\n/*\n  When a page has dynamic routes and uses `getStaticProps()`,\n  it needs to define a list of paths to be statically generated.\n  It returns an object with a `path` property whihc is an array\n  of `params` of each value that we can have for the dynamic\n  route. The returned object also has a `fallback` property which\n  is a boolean. If the `fallback` property is set to false then\n  this indicates Next.js that the list of path params is complete\n  and if a param that does not exist is provided the show a 404\n  page. If it is set to true, then this indicates Next.js to try\n  generate dynamically on the server if a params that does not\n  exist is passed as routing parameter\n*/\nexport async function getStaticPaths() {\n  return {\n    paths: [\n      {\n        params: {\n          meetupId: 'm1'\n        }\n      },\n      {\n        params: {\n          meetupId: 'm2'\n        }\n      },\n      {\n        params: {\n          meetupId: 'm3'\n        }\n      },\n    ],\n    fallback: true\n  };\n}\n\nexport async function getStaticProps(context) {\n  /*\n    The `context` argument has access to routing\n    parameters\n  */\n  const { meetupId } = context.params;\n\n  console.log('getStaticProps - meetupId: ', meetupId);\n\n  const meetup = MOCK_MEETUPS.find(meetup => meetup.id === meetupId);\n\n  // Fetching data from an API\n  const client = await MongoClient.connect(URL);\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n\n  const result = await meetupsCollection.findById(meetupId);\n  const test = {\n    id: result._id.toString(),\n    title: result.title,\n    image: result.image,\n    address: result.address,\n    description: result.description\n  };\n\n  console.log('result: ', result);\n\n  client.close();\n\n  return {\n    props: {\n      meetup\n    }\n  };\n}\n\nexport default MeetupDetail;\n"]},"metadata":{},"sourceType":"module"}