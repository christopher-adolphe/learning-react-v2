{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/christopher/Documents/web/courses/04-react-the-complete-guide/learning-react-v2/meetup-next-js-app/pages/[meetupId]/index.js\";\n// import { Fragment } from 'react';\n// import { useRouter } from 'next/router';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport Meetup from '../../components/meetups/Meetup';\nconst URL = 'mongodb://127.0.0.1:27017/react-meetups';\nconst MOCK_MEETUPS = [{\n  id: 'm1',\n  title: 'The First Meetup',\n  image: 'https://image.shutterstock.com/image-photo/view-malaga-bullring-harbor-spain-600w-281599199.jpg',\n  address: '5th Avenue, Malaga',\n  description: 'This is the first meetup description'\n}, {\n  id: 'm2',\n  title: 'The Second Meetup',\n  image: 'https://image.shutterstock.com/image-photo/dusk-view-barcelona-spain-plaza-600w-520067140.jpg',\n  address: '10th Street, Barcelona',\n  description: 'This is the second meetup description'\n}, {\n  id: 'm3',\n  title: 'The Third Meetup',\n  image: 'https://image.shutterstock.com/image-photo/old-town-prince-palace-on-600w-427693039.jpg',\n  address: '20th Avenue, Monaco',\n  description: 'This is the third meetup description'\n}];\n\nfunction MeetupDetail({\n  meetup\n}) {\n  // const router = useRouter();\n  // const { meetupId } = router.query;\n  // const meetup = MOCK_MEETUPS.find(meetup => meetup.id === meetupId);\n  return /*#__PURE__*/_jsxDEV(Meetup, {\n    meetup: meetup\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 10\n  }, this);\n}\n/*\n  When a page has dynamic routes and uses `getStaticProps()`,\n  it needs to define a list of paths to be statically generated.\n  It returns an object with a `path` property whihc is an array\n  of `params` of each value that we can have for the dynamic\n  route. The returned object also has a `fallback` property which\n  is a boolean. If the `fallback` property is set to false then\n  this indicates Next.js that the list of path params is complete\n  and if a param that does not exist is provided the show a 404\n  page. If it is set to true, then this indicates Next.js to try\n  generate dynamically on the server if a params that does not\n  exist is passed as routing parameter\n*/\n\n\nexport async function getStaticPaths() {\n  // Fetching data from an API\n  const client = await MongoClient.connect(URL);\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  const paths = meetups.map(meetup => ({\n    params: {\n      meetupId: meetup._id.toString()\n    }\n  }));\n  client.close();\n  return {\n    paths,\n    fallback: true\n  };\n}\nexport async function getStaticProps(context) {\n  /*\n    The `context` argument has access to routing\n    parameters\n  */\n  const {\n    meetupId\n  } = context.params;\n  console.log('getStaticProps - meetupId: ', meetupId); // const meetup = MOCK_MEETUPS.find(meetup => meetup.id === meetupId);\n\n  const client = await MongoClient.connect(URL);\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetup\n    }\n  };\n}\nexport default MeetupDetail;","map":{"version":3,"sources":["/Users/christopher/Documents/web/courses/04-react-the-complete-guide/learning-react-v2/meetup-next-js-app/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","Meetup","URL","MOCK_MEETUPS","id","title","image","address","description","MeetupDetail","meetup","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","paths","map","params","meetupId","toString","close","fallback","getStaticProps","context","console","log","findOne","props"],"mappings":";;AAAA;AACA;AACA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AAEA,OAAOC,MAAP,MAAmB,iCAAnB;AAEA,MAAMC,GAAG,GAAG,yCAAZ;AAEA,MAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,kBAFT;AAGEC,EAAAA,KAAK,EAAE,iGAHT;AAIEC,EAAAA,OAAO,EAAE,oBAJX;AAKEC,EAAAA,WAAW,EAAE;AALf,CADmB,EAQnB;AACEJ,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,mBAFT;AAGEC,EAAAA,KAAK,EAAE,+FAHT;AAIEC,EAAAA,OAAO,EAAE,wBAJX;AAKEC,EAAAA,WAAW,EAAE;AALf,CARmB,EAenB;AACEJ,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,kBAFT;AAGEC,EAAAA,KAAK,EAAE,yFAHT;AAIEC,EAAAA,OAAO,EAAE,qBAJX;AAKEC,EAAAA,WAAW,EAAE;AALf,CAfmB,CAArB;;AAwBA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAkC;AAChC;AACA;AAEA;AAEA,sBAAO,QAAC,MAAD;AAAQ,IAAA,MAAM,EAAGA;AAAjB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,MAAM,GAAG,MAAMb,WAAW,CAACc,OAAZ,CAAoBX,GAApB,CAArB;AACA,QAAMY,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACA,QAAMC,KAAK,GAAGJ,OAAO,CAACK,GAAR,CAAYZ,MAAM,KAAK;AACnCa,IAAAA,MAAM,EAAE;AACNC,MAAAA,QAAQ,EAAEd,MAAM,CAACS,GAAP,CAAWM,QAAX;AADJ;AAD2B,GAAL,CAAlB,CAAd;AAMAb,EAAAA,MAAM,CAACc,KAAP;AAEA,SAAO;AACLL,IAAAA,KADK;AAELM,IAAAA,QAAQ,EAAE;AAFL,GAAP;AAID;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AACF;AACA;AACA;AACE,QAAM;AAAEL,IAAAA;AAAF,MAAeK,OAAO,CAACN,MAA7B;AAEAO,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CP,QAA3C,EAP4C,CAS5C;;AAEA,QAAMZ,MAAM,GAAG,MAAMb,WAAW,CAACc,OAAZ,CAAoBX,GAApB,CAArB;AACA,QAAMY,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMN,MAAM,GAAG,MAAMK,iBAAiB,CAACiB,OAAlB,CAA0B;AAAEb,IAAAA,GAAG,EAAEnB,QAAQ,CAACwB,QAAD;AAAf,GAA1B,CAArB;AAEAZ,EAAAA,MAAM,CAACc,KAAP;AAEA,SAAO;AACLO,IAAAA,KAAK,EAAE;AACLvB,MAAAA;AADK;AADF,GAAP;AAKD;AAED,eAAeD,YAAf","sourcesContent":["// import { Fragment } from 'react';\n// import { useRouter } from 'next/router';\nimport { MongoClient, ObjectId } from 'mongodb';\n\nimport Meetup from '../../components/meetups/Meetup';\n\nconst URL = 'mongodb://127.0.0.1:27017/react-meetups';\n\nconst MOCK_MEETUPS = [\n  {\n    id: 'm1',\n    title: 'The First Meetup',\n    image: 'https://image.shutterstock.com/image-photo/view-malaga-bullring-harbor-spain-600w-281599199.jpg',\n    address: '5th Avenue, Malaga',\n    description: 'This is the first meetup description'\n  },\n  {\n    id: 'm2',\n    title: 'The Second Meetup',\n    image: 'https://image.shutterstock.com/image-photo/dusk-view-barcelona-spain-plaza-600w-520067140.jpg',\n    address: '10th Street, Barcelona',\n    description: 'This is the second meetup description'\n  },\n  {\n    id: 'm3',\n    title: 'The Third Meetup',\n    image: 'https://image.shutterstock.com/image-photo/old-town-prince-palace-on-600w-427693039.jpg',\n    address: '20th Avenue, Monaco',\n    description: 'This is the third meetup description'\n  }\n];\n\nfunction MeetupDetail({ meetup }) {\n  // const router = useRouter();\n  // const { meetupId } = router.query;\n\n  // const meetup = MOCK_MEETUPS.find(meetup => meetup.id === meetupId);\n\n  return <Meetup meetup={ meetup } />;\n}\n\n/*\n  When a page has dynamic routes and uses `getStaticProps()`,\n  it needs to define a list of paths to be statically generated.\n  It returns an object with a `path` property whihc is an array\n  of `params` of each value that we can have for the dynamic\n  route. The returned object also has a `fallback` property which\n  is a boolean. If the `fallback` property is set to false then\n  this indicates Next.js that the list of path params is complete\n  and if a param that does not exist is provided the show a 404\n  page. If it is set to true, then this indicates Next.js to try\n  generate dynamically on the server if a params that does not\n  exist is passed as routing parameter\n*/\nexport async function getStaticPaths() {\n  // Fetching data from an API\n  const client = await MongoClient.connect(URL);\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n  const paths = meetups.map(meetup => ({\n    params: {\n      meetupId: meetup._id.toString()\n    }\n  }));\n\n  client.close();\n\n  return {\n    paths,\n    fallback: true\n  };\n}\n\nexport async function getStaticProps(context) {\n  /*\n    The `context` argument has access to routing\n    parameters\n  */\n  const { meetupId } = context.params;\n\n  console.log('getStaticProps - meetupId: ', meetupId);\n\n  // const meetup = MOCK_MEETUPS.find(meetup => meetup.id === meetupId);\n\n  const client = await MongoClient.connect(URL);\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n\n  const meetup = await meetupsCollection.findOne({ _id: ObjectId(meetupId) });\n\n  client.close();\n\n  return {\n    props: {\n      meetup\n    }\n  };\n}\n\nexport default MeetupDetail;\n"]},"metadata":{},"sourceType":"module"}