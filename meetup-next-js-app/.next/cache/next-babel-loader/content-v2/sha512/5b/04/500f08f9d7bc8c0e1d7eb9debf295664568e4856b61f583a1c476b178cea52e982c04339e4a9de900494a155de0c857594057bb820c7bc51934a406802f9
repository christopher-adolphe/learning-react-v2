{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/christopher/Documents/web/courses/04-react-the-complete-guide/learning-react-v2/meetup-next-js-app/pages/index.js\";\n// import { useState, useEffect } from 'react';\nimport { MongoClient } from 'mongodb';\nimport MeetupList from '../components/meetups/MeetupList';\nconst URL = 'mongodb://127.0.0.1:27017/react-meetups';\nconst MOCK_MEETUPS = [{\n  id: 'm1',\n  title: 'The First Meetup',\n  image: 'https://image.shutterstock.com/image-photo/view-malaga-bullring-harbor-spain-600w-281599199.jpg',\n  address: '5th Avenue, Malaga',\n  description: 'This is the first meetup description'\n}, {\n  id: 'm2',\n  title: 'The Second Meetup',\n  image: 'https://image.shutterstock.com/image-photo/dusk-view-barcelona-spain-plaza-600w-520067140.jpg',\n  address: '10th Street, Barcelona',\n  description: 'This is the second meetup description'\n}, {\n  id: 'm3',\n  title: 'The Third Meetup',\n  image: 'https://image.shutterstock.com/image-photo/old-town-prince-palace-on-600w-427693039.jpg',\n  address: '20th Avenue, Monaco',\n  description: 'This is the third meetup description'\n}];\n\nfunction Home({\n  meetups\n}) {\n  // const [ meetups, setMeetups ] = useState([]);\n  // useEffect(() => {\n  //   setMeetups(MOCK_MEETUPS);\n  // }, []);\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 10\n  }, this);\n}\n/*\n  Using the `getStaticProps()` function to inform\n  Next.js to wait for data when building the\n  pages. It should return an object with a `props`\n  key which will then be automatically provided as\n  a prop to the page component.\n  The `getStaticProps()` function take a `context`\n  argument which provides access to routing params\n\n  NOTE: The `getStaticProps()` function only works\n  in `page` components and this function is executed\n  when we run the build process\n  It is more suitable to use `getStaticProps()` when\n  we have a page where the data is rarely updated\n  This data fetching strategy is know as Static\n  Site Generation (SSG)\n*/\n\n\nexport async function getStaticProps() {\n  // Fetching data from an API\n  const client = await MongoClient.connect(URL);\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const result = await meetupsCollection.find().toArray();\n  const meetups = result.map(meetup => ({\n    id: meetup._id.toString(),\n    title: meetup.title,\n    image: meetup.image,\n    address: meetup.address,\n    description: meetup.description\n  }));\n  client.close();\n  return {\n    props: {\n      meetups\n    },\n\n    /*\n      Using the `revalidate` key to schedule a regular\n      update of the prerendered page\n    */\n    revalidate: 3600\n  };\n}\n/*\n  Using the `getServerSideProps()` function to inform\n  Next.js to wait for data on each page request.\n  It should return an object with a `props`\n  key which will then be automatically provided as\n  a prop to the page component.\n  The `getServerSideProps()` function take a `context`\n  argument which provides access to the request and\n  response objects. Having access these object is\n  helpful if we need to perform logic base on the\n  request object like for example, authentication\n\n  NOTE: The `getServerSideProps()` function only works\n  in `page` components and this function is executed\n  when the page is prerendered on the server.\n  It is more suitable to use `getServerSideProps()` when\n  we have a page where the data is frequently updated and\n  where we might also need to get access to the request\n  object\n  This data fetching strategy is know as Server Side\n  Rendering (SSR)\n*/\n// export async function getServerSideProps(context) {\n//   const { req, res } = context;\n//   // Fetching data from an API\n//   return {\n//     props: {\n//       meetups: MOCK_MEETUPS\n//     }\n//   };\n// }\n\nexport default Home;","map":{"version":3,"sources":["/Users/christopher/Documents/web/courses/04-react-the-complete-guide/learning-react-v2/meetup-next-js-app/pages/index.js"],"names":["MongoClient","MeetupList","URL","MOCK_MEETUPS","id","title","image","address","description","Home","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","result","find","toArray","map","meetup","_id","toString","close","props","revalidate"],"mappings":";;AAAA;AACA,SAASA,WAAT,QAA4B,SAA5B;AAEA,OAAOC,UAAP,MAAuB,kCAAvB;AAEA,MAAMC,GAAG,GAAG,yCAAZ;AAEA,MAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,kBAFT;AAGEC,EAAAA,KAAK,EAAE,iGAHT;AAIEC,EAAAA,OAAO,EAAE,oBAJX;AAKEC,EAAAA,WAAW,EAAE;AALf,CADmB,EAQnB;AACEJ,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,mBAFT;AAGEC,EAAAA,KAAK,EAAE,+FAHT;AAIEC,EAAAA,OAAO,EAAE,wBAJX;AAKEC,EAAAA,WAAW,EAAE;AALf,CARmB,EAenB;AACEJ,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,kBAFT;AAGEC,EAAAA,KAAK,EAAE,yFAHT;AAIEC,EAAAA,OAAO,EAAE,qBAJX;AAKEC,EAAAA,WAAW,EAAE;AALf,CAfmB,CAArB;;AAwBA,SAASC,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAA4B;AAC1B;AAEA;AACA;AACA;AACA,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAGA;AAAtB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,MAAM,GAAG,MAAMZ,WAAW,CAACa,OAAZ,CAAoBX,GAApB,CAArB;AACA,QAAMY,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,MAAM,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,GAAyBC,OAAzB,EAArB;AACA,QAAMT,OAAO,GAAGO,MAAM,CAACG,GAAP,CAAWC,MAAM,KAAI;AACnCjB,IAAAA,EAAE,EAAEiB,MAAM,CAACC,GAAP,CAAWC,QAAX,EAD+B;AAEnClB,IAAAA,KAAK,EAAEgB,MAAM,CAAChB,KAFqB;AAGnCC,IAAAA,KAAK,EAAEe,MAAM,CAACf,KAHqB;AAInCC,IAAAA,OAAO,EAAEc,MAAM,CAACd,OAJmB;AAKnCC,IAAAA,WAAW,EAAEa,MAAM,CAACb;AALe,GAAJ,CAAjB,CAAhB;AAQAI,EAAAA,MAAM,CAACY,KAAP;AAEA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLf,MAAAA;AADK,KADF;;AAIL;AACJ;AACA;AACA;AACIgB,IAAAA,UAAU,EAAE;AARP,GAAP;AAUD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAejB,IAAf","sourcesContent":["// import { useState, useEffect } from 'react';\nimport { MongoClient } from 'mongodb';\n\nimport MeetupList from '../components/meetups/MeetupList';\n\nconst URL = 'mongodb://127.0.0.1:27017/react-meetups';\n\nconst MOCK_MEETUPS = [\n  {\n    id: 'm1',\n    title: 'The First Meetup',\n    image: 'https://image.shutterstock.com/image-photo/view-malaga-bullring-harbor-spain-600w-281599199.jpg',\n    address: '5th Avenue, Malaga',\n    description: 'This is the first meetup description'\n  },\n  {\n    id: 'm2',\n    title: 'The Second Meetup',\n    image: 'https://image.shutterstock.com/image-photo/dusk-view-barcelona-spain-plaza-600w-520067140.jpg',\n    address: '10th Street, Barcelona',\n    description: 'This is the second meetup description'\n  },\n  {\n    id: 'm3',\n    title: 'The Third Meetup',\n    image: 'https://image.shutterstock.com/image-photo/old-town-prince-palace-on-600w-427693039.jpg',\n    address: '20th Avenue, Monaco',\n    description: 'This is the third meetup description'\n  }\n];\n\nfunction Home({ meetups } ) {\n  // const [ meetups, setMeetups ] = useState([]);\n\n  // useEffect(() => {\n  //   setMeetups(MOCK_MEETUPS);\n  // }, []);\n  return <MeetupList meetups={ meetups } />;\n}\n\n/*\n  Using the `getStaticProps()` function to inform\n  Next.js to wait for data when building the\n  pages. It should return an object with a `props`\n  key which will then be automatically provided as\n  a prop to the page component.\n  The `getStaticProps()` function take a `context`\n  argument which provides access to routing params\n\n  NOTE: The `getStaticProps()` function only works\n  in `page` components and this function is executed\n  when we run the build process\n  It is more suitable to use `getStaticProps()` when\n  we have a page where the data is rarely updated\n  This data fetching strategy is know as Static\n  Site Generation (SSG)\n*/\nexport async function getStaticProps() {\n  // Fetching data from an API\n  const client = await MongoClient.connect(URL);\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n\n  const result = await meetupsCollection.find().toArray();\n  const meetups = result.map(meetup =>({\n    id: meetup._id.toString(),\n    title: meetup.title,\n    image: meetup.image,\n    address: meetup.address,\n    description: meetup.description\n  }));\n\n  client.close();\n\n  return {\n    props: {\n      meetups\n    },\n    /*\n      Using the `revalidate` key to schedule a regular\n      update of the prerendered page\n    */\n    revalidate: 3600\n  };\n}\n\n/*\n  Using the `getServerSideProps()` function to inform\n  Next.js to wait for data on each page request.\n  It should return an object with a `props`\n  key which will then be automatically provided as\n  a prop to the page component.\n  The `getServerSideProps()` function take a `context`\n  argument which provides access to the request and\n  response objects. Having access these object is\n  helpful if we need to perform logic base on the\n  request object like for example, authentication\n\n  NOTE: The `getServerSideProps()` function only works\n  in `page` components and this function is executed\n  when the page is prerendered on the server.\n  It is more suitable to use `getServerSideProps()` when\n  we have a page where the data is frequently updated and\n  where we might also need to get access to the request\n  object\n  This data fetching strategy is know as Server Side\n  Rendering (SSR)\n*/\n// export async function getServerSideProps(context) {\n//   const { req, res } = context;\n//   // Fetching data from an API\n\n//   return {\n//     props: {\n//       meetups: MOCK_MEETUPS\n//     }\n//   };\n// }\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}