{"version":3,"sources":["pages/Quote.jsx"],"names":["Quote","props","useHttp","getSingleQuote","sendRequest","status","loadedQuote","data","error","params","useParams","id","match","useRouteMatch","useEffect","className","text","quote","path","exact","to","url","quoteId"],"mappings":"mIAAA,+DA4EeA,UAlEf,SAAeC,GACb,MAA0DC,YAAQC,KAAgB,GAA1EC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAcC,EAAnC,EAA6BC,KAAmBC,EAAhD,EAAgDA,MAE1CC,EAASC,cAEPC,EAAOF,EAAPE,GAWFC,EAAQC,cAOd,OAJAC,qBAAU,WACRV,EAAYO,KACX,CAACP,EAAaO,IAEF,YAAXN,EAEA,qBAAKU,UAAU,WAAf,SACE,cAAC,IAAD,MAKFP,EACK,mBAAGO,UAAU,mBAAb,SAAkCP,IAGtCF,EAAYU,KAKf,oCACE,cAAC,IAAD,CAAkBC,MAAQX,IAU1B,cAAC,IAAD,CAAOY,KAAON,EAAMM,KAAOC,OAAK,EAAhC,SACE,qBAAKJ,UAAU,WAAf,SACE,cAAC,IAAD,CAAMA,UAAU,YAAYK,GAAE,UAAMR,EAAMS,IAAZ,aAA9B,+BAMJ,cAAC,IAAD,CAAOH,KAAI,UAAMN,EAAMM,KAAZ,aAAX,SACE,cAAC,IAAD,CAAUI,QAAUb,EAAOE,UAxBxB,mBAAGI,UAAU,mBAAb","file":"static/js/5.37462f26.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { Route, Link, useParams, useRouteMatch } from 'react-router-dom';\n\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from '../lib/api';\n\n// import { getQuote } from '../services/quotes-service';\n\nimport { HighlightedQuote, Comments, LoadingSpinner } from '../components';\n\nfunction Quote(props) {\n  const { sendRequest, status, data: loadedQuote, error } = useHttp(getSingleQuote, true);\n\n  const params = useParams();\n\n  const { id } = params;\n\n  /*\n    Using the `useRouteMatch()` hook from `react-router-dom` to\n    get access to route related data being internally managed by\n    `react-router-dom`. This can be useful to avoid having to\n    manually construct nested path which become difficult to manage\n    as the app grows and path updates are required\n    The `useRouteMatch()` returns a route match object containing\n    information about the `path`, `url`, `params` and `isExact`\n  */\n  const match = useRouteMatch();\n\n\n  useEffect(() => {\n    sendRequest(id);\n  }, [sendRequest, id]);\n\n  if (status === 'pending') {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered focused\">{ error }</p>;\n  }\n\n  if (!loadedQuote.text) {\n    return <p className=\"centered focused\">No quote found!</p>;\n  }\n\n  return (\n    <section>\n      <HighlightedQuote quote={ loadedQuote } />\n\n      {/*\n        Using the `<Route>` component from `react-router-dom` to\n        conditionally display some content when the specified path\n        matches exactly. By doing so, we leverage on `react-router-dom`\n        to display/hide elements on the page based on the current\n        path being visited. This prevents us from writing complex logic\n        to achieve similar results\n      */}\n      <Route path={ match.path } exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={ `${match.url}/comments` }>View Comments</Link>\n        </div>\n      </Route>\n\n\n\n      <Route path={ `${match.path}/comments` }>\n        <Comments quoteId={ params.id } />\n      </Route>\n    </section>\n  );\n}\n\nexport default Quote;\n"],"sourceRoot":""}